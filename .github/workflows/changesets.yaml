name: Changesets

on:
  # watch for CI workflow to finish
  workflow_run:
    branches: [main]
    types:
      - completed
    workflows: ['CI']

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  CI: 1
  HUSKY: 0
  VERCEL_TELEMETRY_DISABLED: 1
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

permissions:
  contents: write
  pull-requests: write

jobs:
  manage-release:
    # only run when CI passed
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      # checkout project
      - uses: actions/checkout@v4

      # setup tools and install dependencies
      - name: Setup dependencies
        uses: twin-digital/appadap/actions/install-dependencies@v0

      # perform changesets release operations
      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          commit: 'chore: release'
          commitMode: 'github-api'
          title: 'chore: release'
          version: pnpm changeset:version
          publish: pnpm changeset:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # create major/minor aliases (e.g. 3 & 3.1)
      - name: Update major/minor alias tags
        if: steps.changesets.outputs.published == 'true'
        env:
          # Set this if youâ€™re a monorepo and only want aliases from one package.
          # Omit PRIMARY_PACKAGE for single-package repos
          # PRIMARY_PACKAGE: "@your-scope/primary-pkg"
          PUBLISHED_JSON: ${{ steps.changesets.outputs.publishedPackages }}
        run: |
          set -euo pipefail

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # --- Resolve VERSION from Changesets output ---
          if [ -n "${PRIMARY_PACKAGE:-}" ]; then
            # Monorepo version: Resolve by PRIMARY_PACKAGE name
            VERSION="$(echo "$PUBLISHED_JSON" \
              | jq -r --arg name "$PRIMARY_PACKAGE" '.[] | select(.name==$name) | .version')"
          else
            # Single-package repo: take the first published item
            VERSION="$(echo "$PUBLISHED_JSON" | jq -r '.[0].version')"
          fi

          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "No version found (package not published this run?). Skipping."
            exit 0
          fi

          MAJOR="${VERSION%%.*}"   # e.g. 0
          MINOR="${VERSION%.*}"    # e.g. 0.1
          TAG="v$VERSION"

          # --- Decide target commit for the aliases ---
          # Prefer the repo tag (if you created it earlier in this workflow).
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            TARGET_SHA="$(git rev-list -n 1 "$TAG")"
          else
            # Fallback: current commit of the publish job
            TARGET_SHA="${GITHUB_SHA}"
          fi

          echo "Aliasing v${MAJOR} and v${MINOR} -> ${TAG} (${TARGET_SHA})"

          # --- Create/force-update moving alias tags ---
          git tag -f "v${MAJOR}" "${TARGET_SHA}"
          git tag -f "v${MINOR}" "${TARGET_SHA}"
          git push -f origin "v${MAJOR}" "v${MINOR}"
