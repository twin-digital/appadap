name: Changesets

on:
  # watch for CI workflow to finish
  workflow_run:
    branches: [main]
    types:
      - completed
    workflows: ['CI']

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  CI: 1
  HUSKY: 0
  VERCEL_TELEMETRY_DISABLED: 1
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

permissions:
  contents: write
  pull-requests: write

jobs:
  manage-release:
    # only run when CI passed
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      # checkout project
      - uses: actions/checkout@v4

      # setup tools and install dependencies
      - name: Setup dependencies
        uses: ./actions/install-dependencies

      # perform changesets release operations
      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          commit: 'chore: release'
          title: 'chore: release'
          version: pnpm changeset:version
          publish: pnpm changeset:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Pick your "primary" package (the one consumers use to pin versions)./
      - name: Create repo tag vX.Y.Z for primary package
        if: steps.changesets.outputs.published == 'true'
        env:
          PRIMARY_PACKAGE: "@your-scope/your-package"
          PUBLISHED_JSON: ${{ steps.changesets.outputs.publishedPackages }}
        run: |
          set -euo pipefail

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          echo "Published packages JSON:"
          echo "$PUBLISHED_JSON"

          # Extract the version number for the primary package
          VERSION=$(echo "$PUBLISHED_JSON" | jq -r --arg name "$PRIMARY_PACKAGE" '
            .[] | select(.name == $name) | .version
          ')

          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "Primary package $PRIMARY_PACKAGE not found in published list, skipping."
            exit 0
          fi

          echo "Creating repo tag v$VERSION for $PRIMARY_PACKAGE"

          git tag -f "v$VERSION"
          git push -f origin "v$VERSION"
